# Following https://circleci.com/docs/2.0/language-ruby/
version: 2.1

orbs: # give us access to specific commands https://circleci.com/docs/2.0/using-orbs/
  ruby: circleci/ruby@1.1.2 # used to cache and install ruby gems
  node: circleci/node@2

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: outintech/nbjc-app
    docker:
      - image: circleci/buildpack-deps:stretch
        auth:
          username: outintech
          password: $DOCKERHUB_PASSWORD
  docker-ruby:
    docker:
      - image: cimg/ruby:2.7.2-node
        auth:
          username: outintech
          password: $DOCKERHUB_PASSWORD
  
# Jobs to run for this project
jobs:
  build: # pulls down current code and install dependencies so we can test
    executor: docker-ruby
    steps:
      - checkout # circle ci command to pull down github code https://circleci.com/docs/2.0/configuration-reference/#checkout
      - ruby/install-deps # install gems with bundler
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"

  test: # Run tests on new code
    docker:
      - image: cimg/ruby:2.7.2-node
        auth:
         username: outintech
         password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9.5-alpine
        auth:
          username: outintech
          password: $DOCKERHUB_PASSWORD
        environment: # POSTGRES environment variables
          POSTGRES_USER: circleci-nbjc-test
          POSTGRES_DB: nbjc_app_test
          POSTGRES_PASSWORD: ""
    environment:
      NBJC_APP_DATABASE_IP: 127.0.0.1
      NBJC_APP_DATABASE_PASSWORD: ""
      PGUSER: circleci-nbjc-test
      PGPASSWORD: ""
      RAILS_ENV: test
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      - run: # wait for db container to boot before running
          name: Wait for DB boot
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      # Run rspec in parallel
      - ruby/rspec-test
  build-image: # build new docker image
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            docker build -t $IMAGE_NAME:latest --build-arg USER_ID=1000 --build-arg GROUP_ID=1000 --build-arg RAILS_MASTER_KEY=${RAILS_MASTER_KEY} .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish-image:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u outintech --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG
  deploy:
    executor: docker-ruby
    environment:
      IMAGE_NAME: nbjc-app
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Run deploy script
          command: |
            DEPLOY_TAG=${CIRCLE_TAG/v/''} bundle exec rake docker:deploy 

# Workflows to orchestrate jobs declared above
workflows:
  version: 2
  build_test:
    jobs:
      - build
      - test:
          requires: # test requires build to pass before running
            - build
  build_test_publish_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - build-image: # building a new docker image depends on build and tests passing
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-image:
          requires:
            - build-image
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy:
          requires:
            - publish-image
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
